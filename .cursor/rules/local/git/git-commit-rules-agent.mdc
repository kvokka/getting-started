---
description: Apply this rule when performing Git operations that modify history or create commits. This includes git commit, git rebase, git merge, and similar operations where commit messages need to follow conventional commits specification. Apply when addressing pre-commit hook failures, writing commit messages, or discussing Git workflow practices where commit message format is relevant.
globs:
alwaysApply: false
---
# Git Commit Rules

All Git write operations must follow conventional commits format. Pre-commit hooks validate this format and any failures must be fixed.

## Initial Change Analysis

At the beginning of executing any task:
1. Check for existing uncommitted changes with `git status` and `git diff`
2. Analyze which tasks are currently in progress
3. Determine if the uncommitted changes are related to any in-progress tasks
4. If related changes exist, commit them following the rules below before starting new work

## Commit Message Format

```plaintext
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

## Elements

1. **Type (required)**:
   - `feat`: New feature (correlates with MINOR in SemVer)
   - `fix`: Bug fix (correlates with PATCH in SemVer)
   - `docs`: Documentation changes
   - `style`: Formatting changes (whitespace, semicolons)
   - `refactor`: Code change that neither fixes a bug nor adds a feature
   - `perf`: Performance improvements
   - `test`: Adding or correcting tests
   - `build`: Changes to build process or tools
   - `ci`: Changes to CI configuration
   - `chore`: Other changes that don't modify src or test files
   - `revert`: Reverts a previous commit

2. **Scope (optional)**: Component/part of codebase affected (e.g., `auth`, `api`)

3. **Description (required)**: Short summary in present tense. **MUST** start with a lowercase letter. **MUST NOT** end with a period. **MUST** be concise.

4. **Body (optional)**: Detailed explanation including motivation for change and comparison with previous behavior

5. **Footer (REQUIRED for task-related commits, strongly RECOMMENDED otherwise)**:
   - Task IDs and summaries **MUST** be listed in the commit footer for any commit that completes or makes progress on a task listed in `tasks.md`. **NO EXCEPTIONS.**
   - Each completed or progressed task **MUST** be referenced in the format:
     ```plaintext
     [T0010] task_summary
     [S0011] another_task_summary
     ```
   - If multiple tasks are affected, list all of them.
   - Other footer content may include breaking changes (`BREAKING CHANGE:`), issue references (`Refs: #123`), etc.

## Task ID Format in Commit Footer

When referencing tasks in commit message footers:

1. **Format Requirements**:
   - Use square brackets around the task ID: `[X0000]`
   - Include a brief summary of the task after the ID
   - Place task references in the commit message footer (after a blank line)

2. **Multiple Task References**:
   - List each task ID on a separate line
   - Order them by task ID

3. **Task ID to Git Commit Mapping**:
   - Task type prefixes (C, T, D, etc.) should be preserved in commit references
   - Format: `[X0000]` where X is the task type letter and 0000 is the task number
   - For subtasks, simplify to the main task ID if the entire task is complete, or use the specific subtask ID: `[X0000.1]`

## Breaking Changes

Indicate breaking changes with:

- `!` after type/scope: `feat(api)!: change authentication flow`
- Or `BREAKING CHANGE:` in footer:

  ```plaintext
  feat: change authentication flow

  BREAKING CHANGE: New API requires different credentials
  ```

## Git Write Operations Requiring Conventional Commits

```mermaid
flowchart TD
    A[Git Write Operations] --> B[Commit Operations]
    A --> C[History Rewriting]
    A --> D[Merging Operations]
    A --> E[Collaborative Operations]

    B --> B1[git commit]
    B --> B2[git commit --amend]

    C --> C1[git rebase]
    C --> C2[git rebase -i]
    C --> C3[git filter-branch]

    D --> D1[git merge]
    D --> D2[git merge --squash]
    D --> D3[git cherry-pick]

    E --> E1[git pull]
    E --> E2[git pull --rebase]
```

## Critical Rules

**These rules MUST be followed AT ALL TIMES, regardless of circumstance:**

1. **NEVER skip validation**: The `--no-verify` flag (or any other method of bypassing pre-commit hooks) is **ABSOLUTELY FORBIDDEN**. Commits **MUST** pass all pre-commit checks.
2. **Fix ALL errors**: All pre-commit hook errors **MUST** be fixed before a commit is considered valid. No errors are acceptable.
3. **Format integrity**: Maintain the specified Conventional Commits format in **ALL** Git write operations (commit, rebase, merge, etc.).
4. **Breaking changes**: Clearly mark **ALL** breaking changes using `!` or `BREAKING CHANGE:`.
5. **Multiple attempts**: If unable to fix pre-commit errors after 5 attempts, **STOP** and seek help or alternative solutions. **DO NOT** skip validation.
6. **Task completion**: When a task is completed or progressed, the commit **MUST** include the appropriate task ID(s) and summaries in the footer. **THIS IS MANDATORY.**

## Task Completion Workflow

When a task is considered complete:

1. **Update Task Status and Make Final Changes**:
   - Update the task status in tasks.md from ⬜ to ✅
   - Ensure all subtasks are also completed if applicable
   - Make any final code changes needed to complete the task

2. **Single Commit for All Changes**:
   - Stage all task-related changes including task.md updates and code changes
   - Make a single commit that includes all these changes
   - Follow the commit message format with proper task ID(s) in the footer

## Valid Examples

✅ Simple feature:

```plaintext
feat: add user authentication feature

[T0042] implement user authentication
```

✅ Bug fix with scope:

```plaintext
fix(login): resolve timeout issue on authentication

[T0043] fix login timeouts when server is under heavy load
```

✅ Breaking change:

```plaintext
feat!: replace user authentication system

BREAKING CHANGE: This requires all users to reset their passwords

[T0044] migrate to new authentication system
```

✅ Detailed commit with multiple tasks:

```plaintext
fix: prevent racing of requests

Introduce a request id and reference to latest request.
Dismiss incoming responses other than from latest request.

Refs: #123
[T0045] add request IDs to prevent race conditions
[S0046] improve response handling
```

## Invalid Examples ❌

```plaintext
Added login feature
```

**Problem**: Missing type and conventional format

```plaintext
feature: implement login
```

**Problem**: Invalid type ("feature" should be "feat")

```plaintext
fix(auth) fix login bug
```

**Problem**: Missing colon after scope

```plaintext
FIX: CRITICAL LOGIN ERROR!
```

**Problem**: Incorrect capitalization, overly dramatic

```plaintext
feat: implement user authentication
```

**Problem**: Missing task ID in footer for completed task

## Pre-commit Hook Failures

If pre-commit hooks fail:

1. Read error messages carefully
2. Fix all reported issues in your commit
3. Stage fixed files with `git add`
4. Attempt to commit again

### Common Hook Errors and Fixes

| Error | Fix |
|----|-----|
| Invalid type | Use allowed types (feat, fix, docs, etc.) |
| Missing colon | Ensure format is `type: description` or `type(scope): description` |
| Empty description | Add clear description after the colon |
| Linting errors | Run appropriate lint fix commands and stage changes |
| Missing task ID | Add task ID in footer format `[TXXXX] task_summary` |
| markdownlint-cli2 errors | See `.cursor/rules/local/markdownlint-cli2/markdown-linting-error-handler-agent.mdc` for detailed guidance on fixing Markdown linting errors |

## Rebase Operations

When performing interactive rebases (`
