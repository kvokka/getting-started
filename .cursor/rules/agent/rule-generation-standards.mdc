---
description: MUST USE with ANY write action with Cursor rules
globs:
alwaysApply: false
---
# Rule Generation Standards

This document establishes standards for creating and managing rules in the `.cursor/rules` directory structure.

## ⚠️ CRITICAL REQUIREMENTS

1. **File naming and title MUST match**: The first heading in the file MUST exactly match the filename (without the extension).
   - For file `agent/git-commit-messages.mdc`, the first heading MUST be `# Git Commit Messages`.
   - For file `always/react-components.mdc`, the first heading MUST be `# React Components`.

2. ⚠️ **IMPORTANT! NEVER create files in the `generated` directory**: Files in this directory are only created through automated processes, not by direct agent actions. Only create files in the `.cursor/rules/always/`, `.cursor/rules/auto/`, `.cursor/rules/agent/`, or `.cursor/rules/manual/` directories.

3. **ONLY create files explicitly requested by the user**: Do not create additional files that weren't specifically requested, even if they seem complementary or helpful.

4. **ALWAYS create proper directory structure before creating files**: When creating a new rule file, ensure that the target directory exists first. Use `mkdir -p` command to ensure directories exist before creating files.

## Directory Structure

Rules must be organized in the following directory structure:

```bash
.cursor/rules/
  ├── always/      # Rules that are always applied
  ├── auto/        # Rules triggered automatically by file patterns, based on globs header
  ├── agent/       # Rules triggered automatically by context/intent, based on the description header
  └── manual/      # Rules only loaded when manually invoked (@manual/rule-name.mdc)
      ├── tool-name/ # Subdirs for organization allowed
      └── ...        # Other category folders as needed
```

Subdirectories *can* be created for scope (e.g., `manual/git/`, `auto/node/`)

## Frontmatter Format

Every rule file **MUST** begin with frontmatter in this exact format:

```mdc
---
description: {desc}
globs: {paths}
alwaysApply: {bool}
---
```
- `desc`: Basing on this desctiption another AI Agent will decide when this rule should be applided. MUST be set for `agent` rules ONLY, otherwise MUST be blank
- `paths`: shoule be a list of file paths. MUST be set for `auto` rules ONLY, otherwise MUST be blank
- `alwaysApply`: Set to `true` for rules intended to always apply (like those in `always/`) and `false` otherwise.

## Rule Content Guidelines

**Structure:**
- Rule content *after* the frontmatter MUST use standard Markdown.

**Content:**
- Focus on actionable, clear directives.
- Avoid unnecessary explanations in the Markdown sections.
- Use concise markdown optimized for agent context window.
- Include valid and invalid examples where appropriate, using Markdown code fences.
- Use emojis and Mermaid diagrams when they enhance understanding.
- Be judicious with content length to optimize performance.
- Indent content within XML sections (if used, prefer YAML) with 2 spaces.
- NEVER use quotes around paths or desc patterns in the frontmatter.
- NEVER group glob extensions with `{}` in the frontmatter.

**Advanced Logic:**
- To represent complex flows, conditional logic (`if/then`), loops, or decision trees within a rule, **prioritize using Mermaid diagrams** (e.g., flowcharts, sequence diagrams) embedded in Markdown code fences. This enhances readability for both humans and AI.
- If a diagram is not suitable or too complex, represent the logic within **structured YAML blocks**
- As a last resort, if neither a diagram nor a structured YAML block can clearly represent the logic, describe it using **clear, unambiguous plain text** in the Markdown body.
- The execution engine/AI is expected to interpret these representations (Mermaid, YAML, or text) to understand the intended logic.

## Example: Valid Agent Rule (Context-Triggered)

**File:** `.cursor/rules/agent/curl.mdc`
```mdc
---
description: curl tool usage rules
globs:
alwaysApply: false
---

# Curl

...
```

## Example: Invalid Rule (Multiple Issues)

**File:** `.cursor/rules/manual/component-accessibility.mdc`

```mdc
---
description: Make components accessible
globs: ["src/components/**/*.{tsx,jsx}"] # Globs not usually needed here
alwaysApply: true # Deprecated
---

# Component Accessibility Guidelines

Components should be accessible.
```

Issues:

- **Redundant `description`:** Describtion must be empty for rule in `manual/` folder
- **Conflicting `alwaysApply`:** Value is `true`, which is inconsistent with placement in `manual/` (folder placement dictates behavior, but the frontmatter should ideally align)
- **Potentially Redundant `globs`:** `globs` are defined, which may be unnecessary for a `manual` rule not triggered by file patterns.
- **Vague Content:** Rule body lacks specific guidance and examples

## Rule Generation Process Checklist

**Before creating or modifying a rule file:**

1. **Confirm Request:** Ensure the user explicitly requested the rule creation/modification.
2. **Determine Folder & Name:** Choose the rule folder (`always`, `auto`, `agent`, `manual`) and construct the filename (`rule-name.mdc`).
3. **Determine Location:** Identify the correct directory path (e.g., `.cursor/rules/agent/`). Ensure the directory exists (`mkdir -p` if needed). Subdirs in `manual/` are for organization only.
4. **Plan Frontmatter:** Define the correct frontmatter.
5. **Plan Content:** Outline the Markdown and YAML structure for the rule body. Include the `# Title` matching the filename.
6. **State Plan:** Before calling `edit_file`, explicitly state your plan: "I will create/modify `path/to/category/rule-name.mdc` as a {Category} rule. Content will include..."

**After proposing the `edit_file` call for the rule file:**

8. **Self-Correction & Verification:**
    * Re-read these standards. Does the proposed filename, location, and content structure comply?
    * **Verify Frontmatter:** Confirm the planned minimal frontmatter is present.
    * **Verify Title:** Ensure the first `# Heading` matches the filename convention.
    * If non-compliant, cancel the edit and correct the plan. State compliance: "The proposed rule complies with generation standards."

## Response After Rule Creation

After creating or updating a rule, respond with:

```mdc
RuleGen Success: path/to/category/rule-name.mdc
Rule Category: {Always | Auto | Agent | Manual}
Rule Description: {The exact content of the description field}
```
